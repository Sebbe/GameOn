// <auto-generated />
using System;
using GameOn.Web.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameOn.Web.Migrations
{
    [DbContext(typeof(GameOnContext))]
    [Migration("20190518090308_AddIdentityProvider")]
    partial class AddIdentityProvider
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameOn.Web.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("FinishScore");

                    b.Property<bool>("Finished");

                    b.Property<int?>("LoserPlayerId");

                    b.Property<int>("MatchType");

                    b.Property<string>("Name");

                    b.Property<int?>("PlayerOneId");

                    b.Property<int?>("PlayerTwoId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("TournamentGroupId");

                    b.Property<int?>("TournamentId");

                    b.Property<int?>("WinnerPlayerId");

                    b.HasKey("Id");

                    b.HasIndex("LoserPlayerId");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("TournamentGroupId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("GameOn.Web.Entities.MatchSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("MatchId");

                    b.Property<int>("PlayerOneScore");

                    b.Property<int>("PlayerTwoScore");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchSets");
                });

            modelBuilder.Entity("GameOn.Web.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<int>("CurrentRank");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameOn.Web.Entities.RankHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("RankHistory");
                });

            modelBuilder.Entity("GameOn.Web.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MinRankPoints");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentGroups");
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentGroupPlayer", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("TournamentGroupId");

                    b.HasKey("PlayerId", "TournamentGroupId");

                    b.HasIndex("TournamentGroupId");

                    b.ToTable("TournamentGroupPlayer");
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentMatchSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GroupId");

                    b.Property<int?>("MatchId");

                    b.Property<int?>("PlayerOneId");

                    b.Property<int?>("PlayerTwoId");

                    b.Property<int>("Round");

                    b.Property<int>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentMatchSchedules");
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentPlayer", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("TournamentId");

                    b.HasKey("PlayerId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentPlayers");
                });

            modelBuilder.Entity("GameOn.Web.Entities.Match", b =>
                {
                    b.HasOne("GameOn.Web.Entities.Player", "LoserPlayer")
                        .WithMany()
                        .HasForeignKey("LoserPlayerId");

                    b.HasOne("GameOn.Web.Entities.Player", "PlayerOne")
                        .WithMany("MatchesAsPlayerOne")
                        .HasForeignKey("PlayerOneId");

                    b.HasOne("GameOn.Web.Entities.Player", "PlayerTwo")
                        .WithMany("MatchesAsPlayerTwo")
                        .HasForeignKey("PlayerTwoId");

                    b.HasOne("GameOn.Web.Entities.TournamentGroup", "TournamentGroup")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentGroupId");

                    b.HasOne("GameOn.Web.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");

                    b.HasOne("GameOn.Web.Entities.Player", "WinnerPlayer")
                        .WithMany()
                        .HasForeignKey("WinnerPlayerId");
                });

            modelBuilder.Entity("GameOn.Web.Entities.MatchSet", b =>
                {
                    b.HasOne("GameOn.Web.Entities.Match", "Match")
                        .WithMany("Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameOn.Web.Entities.RankHistory", b =>
                {
                    b.HasOne("GameOn.Web.Entities.Player", "Player")
                        .WithMany("RankHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentGroup", b =>
                {
                    b.HasOne("GameOn.Web.Entities.Tournament", "Tournament")
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentGroupPlayer", b =>
                {
                    b.HasOne("GameOn.Web.Entities.Player", "Player")
                        .WithMany("TournamentGroups")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameOn.Web.Entities.TournamentGroup", "TournamentGroup")
                        .WithMany("Players")
                        .HasForeignKey("TournamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentMatchSchedule", b =>
                {
                    b.HasOne("GameOn.Web.Entities.TournamentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("GameOn.Web.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");

                    b.HasOne("GameOn.Web.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId");

                    b.HasOne("GameOn.Web.Entities.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId");

                    b.HasOne("GameOn.Web.Entities.Tournament", "Tournament")
                        .WithMany("Schedules")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameOn.Web.Entities.TournamentPlayer", b =>
                {
                    b.HasOne("GameOn.Web.Entities.Player", "Player")
                        .WithMany("Tournaments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameOn.Web.Entities.Tournament", "Tournament")
                        .WithMany("Players")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
